"""or each stage, weonly use twoInverted Residual Blocks (IRB)
 In eachIRB, we first expand the feature map along the channel di-mension byMtimes via a1×1convolution,
 followed bya depthwise separable3×3convolution [19] with the samenumber  of  input  and  output  channels.
Then,  the  featurechannels are squeezed to1/Mvia another1×1convolution.
Here, each convolution is followed by Batch Normalization(BN) [21] and ReLU [38] layers,
except for the last1×1convolution that only has a BN layer.
The final output of theinverted residual block is the element-wise sum of the initialinput
and the output generated by the above three sequen-tial convolutions. For the first layer in each stage,
the strideof the depthwise separable convolution is set as 2,
and thenumber of hidden feature channels is increased if needed.
The output feature maps of five stages of the depth streamare denoted asD1,D2,D3,D4,D5,
the first four of whichhave16,32,64,96output channels,  respectively.
D5andC5have the same number of output channels and the samestride."""

from torch import nn
from torch import Tensor
from .mobilenet import InvertedResidual
from typing import Callable, Any, Optional, List


class DepthStreamStage(nn.Module):
    """
        InvertedResidual -> 1x1 Conv -> 3x3 Depthwise_Seperable_Conv -> 1x1 Conv


        Depthwise Seperable Conv Reference:
            https://pytorch.org/docs/1.7.1/generated/torch.nn.Conv2d.html#torch.nn.Conv2d
    """

    def __init__(self, in_channels, out_channels, M=4) -> None:
        super(DepthStreamStage, self).__init__()

        self.model = nn.Sequential(
            InvertedResidual(
                inp=in_channels,
                oup=int(in_channels / M),
                expand_ratio=M,
                stride=2
                ),
            InvertedResidual(
                inp=int(in_channels / M),
                oup=int(1 / M),
                expand_ratio=M,
                stride=1
                )
            )

    def forward(self, x):
        # Element wise sum
        return x + self.model(x)


class DepthStream(nn.Module):
    """
    The output feature maps of five stages of the depth streamare denoted as
    D1,D2,D3,D4,D5, the first four of whichhave 16,32,64,96
    D5 and C5 have the same number of output channels and the same stride.
    """

    def __init__(self):
        super(DepthStream, self).__init__()

        # out channels as per literature: [16, 32, 64, 96]

        stages: List[nn.Module] = []
        for i in range(5):
            stages.append(DepthStreamStage())

    def forward(self, x):
        pass
